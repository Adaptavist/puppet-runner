#!/usr/bin/env ruby
# Copyright 2015 Adaptavist.com Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require 'fileutils'
require 'yaml'
require 'set'
require 'pathname'
require 'deep_merge'
require 'docopt'
require 'colorize'
require 'facter'
require 'avst/string_ext'

doc = <<DOCOPT
Adaptavist puppet runner

Usage:
  puppet-runner (prepare|all) [-c CONFIG_DIR] [-t TEMPLATES] [-d DESTINATION_DIR] [-f FACTS_DEST] [-s SERVERNAME] [-p PUPPET_APPLY] [-r PUPPETFILE_CONFIG] [-o PUPPETFILE_OUTPUT_PATH] [-e EYAML_KEY_PATH] [-m MODULE_PATH] [-x CUSTOM_FACTS_DIR] [-k] [-n] [-v]
  puppet-runner start [-p PUPPET_APPLY] [-m MODULE_PATH] [-n] [-v]
  puppet-runner -h | --help

Options:
  -h --help                                                                 Show this screen.
  -s SERVERNAME --servername SERVERNAME                                     Custom identification of server, hostname fact if not provided
  -c CONFIG_DIR --config_dir CONFIG_DIR                                     Hiera configuration directory, must ontain <hostname>.yaml and <hostname>_facts.yaml
  -d DESTINATION_DIR --dest_dir DESTINATION_DIR                             Directory for result hiera config.
  -t TEMPLATES --templates TEMPLATES                                        Directory containing templates and defaults folder with functionality templates and default facts
  -f FACTS_DEST --facts_dest_dir FACTS_DEST                                 Destination directory to store result facts
  -x CUSTOM_FACTS_DIR --custom_facts_dir CUSTOM_FACTS_DIR                   Directory containing yaml files with custom facts that will be merged with ones from <hostname>_facts.yaml, custom facts can overwrite them 
  -m MODULE_PATH --module_path MODULE_PATH                                  Path to find puppet modules, can be colon (:) delimited
  -p PUPPET_APPLY --puppet_apply PUPPET_APPLY                               Custom puppet apply command to run
  -r PUPPETFILE_CONFIG --puppetfile_config puppetfile_config                Puppetfile composition config file
  -o PUPPETFILE_OUTPUT_PATH --puppetfile_output_path PUPPETFILE_OUTPUT_PATH Result Puppetfile path
  -e EYAML_KEY_PATH --eyaml_key_path EYAML_KEY_PATH                         Path to eyaml encryption key pair
  -k --keep-facts                                                           Flag to keep the encrypted facts file in /tmp for analysis
  -n --dry-run                                                              Flag to indicate puppet should run in dry run mode (--noop), this also sets the verbose flag to true
  -v --verbose                                                              Flag to indicate that all output from puppet apply should be displayed instead of just stdout
Commands:
  all           Runs the following commands prepare, start 
  start         Runs puppet apply 
  prepare       Creates result hiera config as a composition of functionalities based on config, merges provided facts with defaults
DOCOPT


def path_join_glob(dir, file_pattern)
    "#{dir}/#{file_pattern}"
end

def debug(msg)
    puts msg.green
end

def warning(msg)
    puts msg.yellow
end

def extract_value_from_hash(input)
  res = {}
  if input
    res = input.map{|key, val| 
      if val.is_a?(Hash)
        value = val["value"]
      else
        value = val
      end
      {key => value}
    }
  end
  res
end

def extract_comment_from_hash(input)
  res = {}
  if input
    res = input.map{|key, val|

      if val != nil
        if val.is_a?(Hash)
          value = val["comment"]
        else
          value = nil
        end
      else
        value = nil
      end
      {key => value}
    }
  end
  res
end

def extract_type_from_hash(input)
  res = {}
  if input
    res = input.map{|key, val|
      if val != nil
        type = 'string'
        if val.is_a?(Hash) and  val["type"] != nil
           type = val["type"]
        end
      end
      {type => key }
    }
  end
  res
end

# function to resolve inter fact references, it should return the last fact name (not value)
def resolve_fact(fact_name, max_depth=5, current_depth=0)
  final_val = nil
  fact_name = fact_name.sub(/%{::/,'').sub(/}/,'')
  if max_depth == current_depth
    warning "Fact resolution has reached a depth of 5 facts, aborting lookup"
  else
    # attempt to get value
    val = $all_facts[fact_name] || Facter.value(fact_name) || nil

    if val == "%{::#{fact_name}}"
      warning "Fact resolves to itself, skipping"
    elsif val.instance_of?(String) and val.match(/%{::.*.}/)
      val = resolve_fact(val,max_depth, current_depth + 1)
    else
      val = "%{::#{fact_name}}"
    end
    final_val = val
  end
  final_val
end


begin
    options = Docopt::docopt(doc)
rescue Docopt::Exit => e
    abort(e.message.red)
end

stop_apply = false
keep_facts = false

if options['all'] || options['prepare']
    input_dir = options["--config_dir"] || options["-c"] 
    dest_dir = options["--dest_dir"] || options["-d"]
    facts_dest_dir = options["--facts_dest_dir"] || options["-f"]
    custom_facts_dir = options["--custom_facts_dir"] || options["-x"] || nil
    templates = options["--templates"] || options["-t"]
    puppetfile_config_path = options["--puppetfile_config"] || options["-r"]
    puppetfile_output_path = options["--puppetfile_output_path"] || options["-o"]
    eyaml_key_path = options["--eyaml_key_path"] || options["-e"] || "/etc/puppet/config"
    hostname = options["--servername"] || options["-s"] || Facter.value("hostname")
    puts "Hostname #{hostname}"
    keep_facts = true if options["-k"] or options["--keep-facts"]
    

    config_file_path = path_join_glob(input_dir, hostname+".yaml")
    templates_dir = path_join_glob(templates, "templates")
    def_facts_dir = path_join_glob(templates, "defaults")

    debug "Reading #{config_file_path}"  
    abort "Could not find #{config_file_path}".red if !File.file? config_file_path 
    abort "Could not find #{templates_dir}".red if !File.directory? templates_dir 
    abort "Could not find #{def_facts_dir}".red if !File.directory? def_facts_dir 
    abort "Could not find #{dest_dir}".red if !File.directory? dest_dir 
    abort "Could not find #{facts_dest_dir}".red if !File.directory? facts_dest_dir
    abort "Could not find #{puppetfile_config_path}".red if !File.file? puppetfile_config_path

    config = YAML.load_file(config_file_path)

    functionalities = config["functionalities"]

    output_file_path = path_join_glob(dest_dir, "#{hostname}.eyaml")
    output_encrypted_facts_file_path = "/tmp/#{hostname}_facts.eyaml"
    output_facts_file_path = path_join_glob(facts_dest_dir, "#{hostname}_facts.yaml")
    if File.file? output_file_path
      FileUtils.rm output_file_path
    end
    if File.file? output_encrypted_facts_file_path
      FileUtils.rm output_encrypted_facts_file_path 
    end
    if File.file? output_facts_file_path
      FileUtils.rm output_facts_file_path
    end

    debug "Writing to #{output_file_path}"
    result_template = {}
    result_default_facts = {}
    prefixed_required_facts = Set.new
    prefixed_facts_comments = {}
    puppetfile_config = YAML.load_file(puppetfile_config_path) || {}
    puppetfile_dependencies = []
    global_data_types = []
    nil_transform_present = false
      # functionalities:
      # # In honor of Henry... 
      #   1_app:
      #     - confluence: "conf1"
      #     - confluence: "conf2"
      #     - jira
      #   2_database:
      #     - mysql

      functionalities.keys.sort.each do |key|
        next unless functionalities[key]
          
        functionalities[key].each do |to_add|
          
          if to_add.is_a?(Hash)
            template_to_add = path_join_glob(templates_dir, "#{to_add.keys[0]}.yaml")
            facts_to_add = path_join_glob(def_facts_dir, "#{to_add.keys[0]}.yaml")
          else
            template_to_add = path_join_glob(templates_dir, "#{to_add}.yaml")
            facts_to_add = path_join_glob(def_facts_dir, "#{to_add}.yaml")
          end

          debug "Adding template #{template_to_add}"
          debug "Adding facts #{facts_to_add}"
          if File.file? template_to_add and File.file? facts_to_add
            # prefix is defined, must replace
            data = YAML.load_file(template_to_add) || {}
            default_facts = YAML.load_file(facts_to_add) || {}
            prefixes = data["prefixes"] || []
            required_facts = data["required_facts"] || []
            puppetfile_parts = data["dependencies"] || []
            # merge dependencies 
            puppetfile_dependencies = puppetfile_dependencies | puppetfile_parts

            data_as_string = data.to_s
            facts_as_string = extract_value_from_hash(default_facts).to_s

            fact_comments_as_string = extract_comment_from_hash(default_facts).to_s
            
            # get a list of each fields type if set (if not they will report as strings)
            data_types = extract_type_from_hash(default_facts)
            
            if to_add.is_a?(Hash)
              # if prefixes are not defined skip replacing
              if prefixes
          
                # in case of hash, replace each otherwise replace all with prefix
                if to_add.values[0].is_a?(Hash)
                  to_add.values[0].keys.each do |prefix_key|
                    
                    prefixes.each do |prefix|
                      if prefix == prefix_key
                        replace_prefixes_with = to_add.values[0][prefix_key]
                        debug "will substiture: #{prefix} with #{replace_prefixes_with}"
                        data_as_string = data_as_string.gsub(/\%{::#{prefix}/, "\%{::#{replace_prefixes_with}")
                        facts_as_string = facts_as_string.gsub(/#{prefix}/, "#{replace_prefixes_with}")
                        fact_comments_as_string = fact_comments_as_string.gsub(/#{prefix}/, "#{replace_prefixes_with}")
                        prefixed_required_facts = prefixed_required_facts.merge(required_facts.map! { |item| item.gsub(/#{prefix}/, "#{replace_prefixes_with}") })
                        if !data_types.empty?
                          data_types.each do | transform |
                            transform.each do|key, value|
                              transform[key] = value.gsub(/#{prefix}/, "#{replace_prefixes_with}")
                            end
                          end
                        end
                      end
                    end
                  end

                else 
                  replace_prefixes_with = to_add.values[0]
                  prefixes.each do |prefix|
                    debug "will substitute: #{prefix} with #{replace_prefixes_with}"
                    data_as_string = data_as_string.gsub(/\%{::#{prefix}/, "\%{::#{replace_prefixes_with}")
                    facts_as_string = facts_as_string.gsub(/#{prefix}/, "#{replace_prefixes_with}")
                    fact_comments_as_string = fact_comments_as_string.gsub(/#{prefix}/, "#{replace_prefixes_with}")
                    prefixed_required_facts = prefixed_required_facts.merge(required_facts.map! { |item| item.gsub(/#{prefix}/, "#{replace_prefixes_with}") })
                    if !data_types.empty?
                      data_types.each do | transform |
                        transform.each do|key, value|
                          transform[key] = value.gsub(/#{prefix}/, "#{replace_prefixes_with}")
                        end
                      end
                    end
                  end
                end
              end

              template = eval (data_as_string)
              default_facts_prefixed = eval (facts_as_string)
              default_fact_comments = eval (fact_comments_as_string)
            else
              template = YAML.load_file(template_to_add)
              plain_facts = YAML.load_file(facts_to_add)
              default_facts_prefixed = extract_value_from_hash(plain_facts)
              default_fact_comments = extract_comment_from_hash(plain_facts)  
              prefixed_required_facts = prefixed_required_facts.merge(required_facts)
            end
            # add the "local" data type list to the global one
            global_data_types.push(*data_types)

            result_template.deep_merge!(template)
            # default_facts_prefixed is Array of hashes as the result of map, this will create hash from it
            result_default_facts.merge!(default_facts_prefixed.reduce Hash.new, :merge)
            prefixed_facts_comments.merge!(default_fact_comments.reduce Hash.new, :merge)
          else
            abort "Can not find template in templates folder #{template_to_add} or #{facts_to_add}".red
          end
        end
      end
      custom_facts_path = path_join_glob(input_dir, "#{hostname}_facts.yaml")
      custom_facts = YAML.load_file(custom_facts_path) || {}

      # add a fact for the localtion of facter
      custom_facts['facter_file_location'] = output_facts_file_path

      File.open(output_encrypted_facts_file_path, 'w+') do |output_file|
        output_result_default_facts = result_default_facts.deep_merge!(custom_facts, {:merge_hash_arrays => true}).to_yaml
      
        # convert final facts to hash for inter fact resolution and also for potential transformations later
        $all_facts = YAML.load(output_result_default_facts)

        #convert result templat to string
        result_template = result_template.to_s

        # loop through facts looking for any that reference other facts
        $all_facts.each do | fact_key, fact_val |
          if fact_val.instance_of?(String) and fact_val.match(/%{::.*.}/)
            debug "Fact #{fact_key} references another fact or facts"
            # find each instance of a fact within the value (it may contain multiple facts
            # i.e "TEST%{::fact1}TEST%{::fact2}"
            fact_val.gsub(/}/,"}\n").scan(/%{::.*.}/).each do | fact |
              # resolve the fact down to its last reference to another fact (not the end value)
              resolved_fact = resolve_fact(fact)
              # if the resolved fact name is not the same as the original fact we found referenced
              # then replace the value in fact_val
              if !resolved_fact.nil? and resolved_fact != fact
                fact_val = fact_val.gsub(/#{fact}/,"#{resolved_fact}")
              end
            end
            debug "Attempting to replace fact '#{fact_key}' with value '#{fact_val}' in compiled template"
            # replace the original fact reference in the template with the resovled value
            # this is done before global teansformation as they may change the final value again
            result_template = result_template.gsub(/\"\%{::#{fact_key}}\"/, "\"#{fact_val}\"")
          end
        end

        # add comments above any fact lines
        prefixed_facts_comments.each do |pattern, replacement|
          if replacement != nil
            output_result_default_facts.gsub!(/^#{pattern}/, "\##{replacement}\n#{pattern}")
          end
        end

        # merge custom facts if parameter provided
        custom_facts_all = {}
        if (custom_facts_dir)
          Dir.glob("#{custom_facts_dir}/*.yaml").sort.each do |custom_facts_file|
            custom_facts_from_file = YAML.load_file(custom_facts_file) || {}
            custom_facts_all.merge!(custom_facts_from_file)
          end
        end
        # merge, prefer custom facts
        merged_all_facts = YAML.load(output_result_default_facts).merge!(custom_facts_all)

        # write the temp encrypted facts file
        output_file.write(merged_all_facts.to_yaml)

        # now that the merged final facts are present look for any global transformations to apply 
        # global transformations are currently either booleans that need to be expressed directly in 
        # the output file or nilable values that need to be expressed as unquoted tildas (~)
        if !global_data_types.empty?
          global_data_types.each do | transform |
            transform.each do|transform_type, transform_value|
              begin
                if transform_type == 'boolean'
                  debug "Attempting to replace boolean value for fact #{transform_value}"
                  # convert the fact to boolean and then back to string during the replace, this allows validation that the fact is actually a boolean
                  result_template = result_template.gsub(/\"\%{::#{transform_value}}\"/, $all_facts[transform_value].to_bool.to_s)
                elsif transform_type == 'nilable'
                  # replace fact reference with tilda if the value is nil, empty or already a tilda
                  # due to issues with ruby hash values being unquoted we will quote it now and remove the quotes later
                  if $all_facts[transform_value].nil? or $all_facts[transform_value].empty? or $all_facts[transform_value] == "~"
                    debug "Attempting to replace nilable value for fact #{transform_value}"
                    # replace value with tilda
                    result_template = result_template.gsub(/\"\%{::#{transform_value}}\"/, '"~"')
                    # identify that we have made at least one nil transformation 
                    nil_transform_present = true
                  end
                end
              rescue
                warning "Unable to convert fact #{transform_value} with value #{all_facts[transform_value]} into #{transform_type}, conversion will be skipped"
              end
            end
          end
        end
      end

      # convert result_template back to hash
      result_template = eval(result_template)

      # Write results
      File.open(output_file_path, 'w+') do |output_file|
        YAML.dump(result_template, output_file)
      end

      # hack to get around the fact we have to pass tilda as quoted earlier
      if nil_transform_present
        compiled_hiera = File.read(output_file_path)
        replaced_hiera = compiled_hiera.gsub('"~"', '~')
        File.open(output_file_path, "w") {|new_hiera| new_hiera.puts replaced_hiera}
      end
      
      # decrypt facts file because Puppet doesn't appear to be able to read encrypted facts
      require 'hiera/backend/eyaml/plugins'
      require 'hiera/backend/eyaml/encryptors/pkcs7'
      require 'hiera/backend/eyaml/subcommands/decrypt'
      require 'hiera/backend/eyaml/options'
      Hiera::Backend::Eyaml::Encryptors::Pkcs7.register
      options = {
          :eyaml=>output_encrypted_facts_file_path, 
          :pkcs7_public_key =>"#{eyaml_key_path}/public_key.pkcs7.pem",
          :pkcs7_private_key=>"#{eyaml_key_path}/private_key.pkcs7.pem" }
      Hiera::Backend::Eyaml::Options.set(Hiera::Backend::Eyaml::Subcommands::Decrypt.validate options)

      # manually ensure multi-line encrypted values are output correctly into the new decrypted yaml file
      # this is just modifed source from http://www.rubydoc.info/gems/hiera-eyaml/2.0.8/Hiera%2FBackend%2FEyaml%2FSubcommands%2FDecrypt.execute
      File.open(output_facts_file_path, 'w') do |output_file|
        parser = Hiera::Backend::Eyaml::Parser::ParserFactory.encrypted_parser
        tokens = parser.parse(Hiera::Backend::Eyaml::Options[:input_data])
        case Hiera::Backend::Eyaml::Options[:source]
          when :eyaml
            decrypted = tokens.map{ |token|
              decrypted_value = token.to_decrypted
              encryption_indicator = 'DEC::PKCS7['
              four_spaces = '    '
              multiline_value = if decrypted_value.include? encryption_indicator and decrypted_value.include? "\n" then
                                  "|\n#{four_spaces}" + decrypted_value.gsub("\n", "\n#{four_spaces}")
                                else
                                  decrypted_value
                                end
              multiline_value.gsub(encryption_indicator, '').gsub(']!', '')
            }
          else
            decrypted = tokens.map{ |token|
              case token.class.name
                when /::EncToken$/
                  token.plain_text
                else
                  token.match
              end
            }
        end
        output_file.write(decrypted.join)
      end

      # unless asked not to, attempt to remove the encrypted facts file
      if keep_facts
        debug "Removal of tmp encrypted facts file #{output_encrypted_facts_file_path} skipped at users request"
      else
        debug "Attempting to remove tmp encrypted facts file #{output_encrypted_facts_file_path}"
        begin
          FileUtils.rm output_encrypted_facts_file_path
        rescue
          warning "Unable to remove tmp encrypted facts file #{output_encrypted_facts_file_path}"
        end
      end
      
      # create puppetfile from the dictionary
      File.open(puppetfile_output_path, 'w+') do |output_file|
        header = "#!/usr/bin/env ruby\n\n"
        output_file.write(header)
        puppetfile_dependencies.each do |pup|
          dep = puppetfile_config[pup]
          if dep
            res = "mod \"#{dep['name']}\", \n" +
             "  :#{dep['repo_type']} => '#{dep['repo']}',\n" +
             "  :#{dep['ref_type']} => '#{dep['ref_value']}'\n\n"
             output_file.write(res)
          else 
            warning "Can not find configuration for module #{pup} in config of puppet modules!"
          end
        end
      end

      nil_value_facts = result_default_facts.select{|key, val| val == nil}

      # Check that all required prefixed facts are present
        if (prefixed_required_facts && !prefixed_required_facts.empty?) or !nil_value_facts.empty?
        not_provided_required_facts = prefixed_required_facts - custom_facts.keys
        
        if !not_provided_required_facts.empty? or !nil_value_facts.empty?
          not_provided_required_facts.merge(nil_value_facts.keys)
          warning "You have to provide all required fields, they will default to empty string and puppet will fail: "
          not_provided_required_facts.each do |f|
            warning "#{f}"
          end
          warning "Puppet apply will not run as it will fail without those facts provided!"
          stop_apply = true
        end
      end      
end


# start puppet
if (options['start'] || options['all']) && !stop_apply
    require 'puppet'

    #  set dry run option if the flag has been set
    if options["-n"] or options["--dry-run"]
      dry_run = '--noop'
      verbose_output = true
    else
      dry_run = ''
    end

    # if the user has specified a module path pass it to puppet
    if options["--module_path"]
      modulefile_definition = "--modulepath #{options['--module_path']}"
    elsif options["-m"]
      modulefile_definition = "--modulepath #{options['-m']}"
    # if no modulepath has been set default to /etc/puppet/modules for puppet 4 and above and blank for older versions 
    else
      modulefile_definition = Gem::Version.new(Puppet.version) > Gem::Version.new('4.0.0') ? '--modulepath /etc/puppet/modules' : ''
    end

    # construct defaut puppet apply command
    puppet_command = "sudo su -c 'source /usr/local/rvm/scripts/rvm; puppet apply #{dry_run} /etc/puppet/manifests/site.pp --confdir=/etc/puppet  --verbose --detailed-exitcodes #{modulefile_definition}'"
    
    # if a custom puppet apply command has been set use if, otherwise use the default generated above
    to_execute = options["--puppet_apply"] || options["-p"] || puppet_command
    debug "Running #{to_execute}"
    
    # execute puppet apply and capture return code
    `#{to_execute}`
    exit_code = $?.exitstatus

    # attempt to remove the fact file as its unencrypted (we do not care about exit status)
    fact_file_location = Facter.value("facter_file_location")
    if fact_file_location 
      if File.file?(fact_file_location)
        debug "Attempting to remove fact file #{fact_file_location}"
        begin
          FileUtils.rm fact_file_location
        rescue
          warning "Unable to remove facts file #{fact_file_location}.\nPlease urgently remove this as it holds unencrypted values"
        end
      end
    else
      warning "Unable to locate Facts file, please urgently locate and remove this as it holds unencrypted values"
    end

    # if we see a bad exit code report it, for refrerence good codes are:
    # 0: The run succeeded with no changes or failures; the system was already in the desired state.
    # 2: The run succeeded, and some resources were changed.
    if exit_code != 2 and exit_code != 0
      raise "execute_puppet exit status: #{exit_code}"
    end
end

